Definition: Inheritance is a core concept of OOPS in Python; It allows to create hierarchy of classes that shares properties and methods by deriving a class from another class. It is same as C/C++.
With the help of this base class properties to the derive class.

Note: __init__() is known as Constructor.

Benefits:
•	It represents real-world relationship
•	Allows reusability
•	Provide automatic inheritance means it have transitive nature

Syntax:
Class BaseClass:
	{Body}
Class DerivedClass
	{Body}

******************Example: Creating a Parent Class ****************
#define class name as Student
class Student(object):
    
    #Constructor
    def __init__(self, name, rollno):
        self.name = name
        self.rollno = rollno
    
        
    #Check the person is Student
    def Display(self):
        print(self.name, self.rollno)
        

#driver code
student = Student("Jyoti", 101) #Create Object of the Student class
student.Display() #Call the methods of the class 

OUTPUT:
Jyoti 101

******************Example: Creating a Child Class ****************
Example:

# A Python program to demonstrate inheritance
class Person(object):

    # Constructor
    def __init__(self, name, id):
    	self.name = name
    	self.id = id
    
    # To check if this person is an employee
    def Display(self):
    	print(self.name, self.id)


# Driver code
emp = Person("Satyam", 102) # An Object of Person
emp.Display()


#Derive Class 
class Emp(Person):

    def Print(self):
    	print("Emp class called")
	
Emp_details = Emp("Mayank", 103)

# calling parent class function
Emp_details.Display()

# Calling child class function
Emp_details.Print()


OUTPUT: 
Satyam 102
Mayank 103
Emp class called
