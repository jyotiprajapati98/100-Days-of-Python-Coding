f-string: it is use to formate the string literals or string interpolation.
The f-string is same as the str.format().
f-string can use for:

a) print variable:
Example:
name= "Jyoti"
print(f"My name is {name} & {name} means light")

*************OUTPUT********************
My name is Jyoti & Jyoti means light

b) print Date:
Example:

import datetime
today = datetime.datetime.today()
print(f"{today: %B %d, %Y}")

*************OUTPUT********************
August 11, 2024

c) evaluate expression:
Example:
eng = 75
math = 80
AI = 95
print(f"Jyoti got {eng + math + AI} from 300")

*************OUTPUT********************
Jyoti got 250 from 300

d) Backslash cannot be use: It cannot use directly with f-string but we can't put in the variable.
Example:
#ord() is return the unicode order of the keyword or  specified character
newline = ord('\n')
print(f"newline : {newline}")

*************OUTPUT********************
newline : 10

e) Inline comments not supported by f-string:
Example:
f"Jyoti is {26 #years} old."

*************OUTPUT********************
  File "/home/main.py", line 1
    print(f"Jyoti is {26 #years} old.")
                                      ^
SyntaxError: f-string expression part cannot include '#'

F) Dictionaries with f-string: Make sure that if you are using double quotes(") with f-string then use single quotes(') inside the f-string vice-versa.
Otherwise throws syntax error.

Example:
detail = {'id': 102, 'name': 'Jyoti'}
print(f"id of {detail["name"]} is {detail["id"]}")

*************OUTPUT********************
  File "/home/main.py", line 2
    print(f"id of {detail["name"]} is {detail["id"]}")
                           ^^^^
SyntaxError: f-string: unmatched '['

Correct way:
detail = {'id': 102, 'name': 'Jyoti'}
#print(f"id of {detail["name"]} is {detail["id"]}")

#correct way to use
print(f"id of {detail['name']} is {detail['id']}")

*************OUTPUT********************
id of Jyoti is 102




